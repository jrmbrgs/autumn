var l=      require(ROOT_AD + '/libs/logger'),
    fs=     require('fs'),
    xml2js= require('xml2js');



/**
 * sIde2JS class
 *
 */
var sIde2JS= function(formatter, regen) {

    this.inFilePath=  null;
    this.outFilePath= null;
    this.outFileBackupPath= null;
    this.outFh=       null;
    this.parser=      null;

    // The JS formatter dedicated to a JS Unit Test FW. ie. CasperJS
    this.formatter= formatter;
    this.regen= typeof regen != 'undefined' ? regen : false;


    this.testSuitXS=  [];
    this.cmd2test =   ['open', 'verifyElementPresent'];
    this.testUrl=     null;
    this.nbTest=      0;


    /**
     * Parses a selenium IDE xml macro and extract some global information
     */ 
    this.parseTestSuite= function(err, testSuite){
        var testCaseJson= testSuite.TestCase;
        l.info('NB command found : ' + testCaseJson.selenese.length);
        this.testUrl = testCaseJson.$.baseURL;
        this.testSuitXS= testCaseJson.selenese;
        /// Count how many selenese are asserts test func
        this.testSuitXS.forEach( function(v, k){
            var command= v.command[0];
            var t = this.cmd2test.indexOf(command)>=0 ? 1 : 0;
            this.nbTest = this.nbTest +t;
        }, this);
    };
  

    /**
     * Converts selenium commands according to the chosen JS FW formatter
     */ 
    this.buildCommand= function(v, k){
            var command= v.command[0];
            var target= v.target[0];
            var value= v.value[0];
            l.debug(" c:" + command + " v:" + value + " t:" + target);
            switch(command) {
                /// Actions funcs
                case 'open':
                    this.write( this.formatter.open(this.testUrl+target));
                    break;
                case 'type':
                    this.write( this.formatter.type(target, value));
                    break;
                case 'click':
                case 'clickAndWait':
                    this.write( this.formatter.clickAndWait(target, value));
                    break;
                /// Asserts funcs
                case 'assertElementPresent':
                case 'verifyElementPresent':
                    this.write( this.formatter.verifyElementPresent(target));
                    break;
                case 'captureEntirePageScreenshot':
                case 'captureEntirePageScreenshotAndWait':
                    this.write( this.formatter.capture());
                    break;
                case 'waitForElementPresent':
                case 'waitForVisible':
                    break;
                default:
                    //throw "Unknown selenium command : '" +command+ "'";
            }
    
    };
      
    this.write= function( s){
        this.outFh.write( s);
    };
 
    this.openOutFile= function(){
        if (fs.existsSync(this.outFilePath)) {
            if (this.regen) {
                this.backupOutFile();
            }
            else{
                throw "Unable to create file '" + this.outFilePath + "' file exists. Use regen option";
            }
        }
        this.outFh= fs.createWriteStream( this.outFilePath, {flags: 'ax', encoding: 'utf8', mode: 0666});
    };

    this.backupOutFile= function(){
        fs.renameSync( this.outFilePath, this.outFileBackupPath );
        l.info(this.outFilePath + ' backed up into ' + this.outFileBackupPath); 
    };
    this.deleteOutFileBackup= function(){
        if (fs.existsSync(this.outFileBackupPath)) {
            fs.unlinkSync( this.outFileBackupPath );
            l.info(this.outFileBackupPath + ' removed'); 
        }
    };


    /**
     * 
     */ 
    this.writeFileHeader= function() {

        var h= '/**\n' +
               ' * File generated by SIde2JS\n' +
               ' *\n' +
               ' */\n' +
               '\n' +
               '\n' +
               '\n' +
               'var cnf = require(\'../config.js\');\n';
        this.write( h);
    };

};                        

sIde2JS.prototype.makeJSUnitTestFile = function(inFilePath, outFilePath){
    this.inFilePath=  inFilePath;
    this.outFilePath= outFilePath;
    this.outFileBackupPath= outFilePath + '.backup';
    try {
        // Open file hanler
        this.openOutFile();
        this.writeFileHeader();
        /// Parse and build commands
        this.parser = new xml2js.Parser();       
        var fileData = fs.readFileSync(this.inFilePath, 'utf8');
        this.parser.parseString(fileData, this.parseTestSuite.bind(this));
        this.outFh.write( this.formatter.header('testName', this.nbTest, 'debug'));
        this.testSuitXS.forEach( this.buildCommand.bind(this));
        // Close file handler
        l.info("File '" + this.outFilePath + "' was successfully read.");
        this.outFh.write( this.formatter.footer());
        if (this.regen) {
            this.deleteOutFileBackup();
        }
    } catch (ex) {
        l.error(ex);
    }
};


module.exports = sIde2JS;
